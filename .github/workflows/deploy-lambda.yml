name: Deploy Lambda Function

on:
  push:
    branches: [ main ]
    paths:
      - 'lambda/**'
      - '.github/workflows/deploy-lambda.yml'

env:
  LAMBDA_FUNCTION: AIponATimeCustomerCare
  LAMBDA_RUNTIME: python3.13
  AWS_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3 twilio
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Create deployment package
      run: |
        cd lambda
        
        # Create a clean package directory
        rm -rf package
        mkdir -p package
        
        # Copy the Lambda function package
        cp -r AIponATimeCustomerCare package/
        
        # Install dependencies
        pip install --target ./package boto3 twilio
        
        # Create the zip file with the correct structure
        cd package
        zip -r ../${{ env.LAMBDA_FUNCTION }}.zip .
        
        # Create a zip with just the function for debugging
        cd ..
        zip -j ${{ env.LAMBDA_FUNCTION }}-function.zip AIponATimeCustomerCare/lambda_function.py
        
        # List files for debugging
        echo "=== Current directory structure ==="
        find . -type f | sort
        echo "=== Package directory contents ==="
        find package -type f | sort
        
        cd ..
        
    - name: Deploy to Lambda
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        
        # Function to wait for any in-progress updates
        function wait_for_update() {
          local function_name=$1
          local region=$2
          local max_attempts=10
          local delay=5
          
          echo "Checking for in-progress updates..."
          for ((i=1; i<=max_attempts; i++)); do
            status=$(aws lambda get-function --function-name $function_name --region $region --query 'Configuration.LastUpdateStatus' --output text 2>/dev/null || echo "")
            
            if [[ "$status" == "InProgress" ]]; then
              echo "Update in progress, waiting $delay seconds... (Attempt $i/$max_attempts)"
              sleep $delay
            else
              echo "Function is ready for update"
              return 0
            fi
          done
          
          echo "Error: Timed out waiting for function to be ready for update"
          return 1
        }
        
        cd lambda
        
        # Wait for any in-progress updates to complete
        wait_for_update ${{ env.LAMBDA_FUNCTION }} ${{ env.AWS_REGION }}
        
        # Update function code with error handling
        echo "Updating function code..."
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION }} \
          --zip-file fileb://${{ env.LAMBDA_FUNCTION }}.zip \
          --region ${{ env.AWS_REGION }} \
          || { echo "Failed to update function code"; exit 1; }
        
        # Wait for the code update to complete
        sleep 5  # Short delay to ensure the update is processed
        
        # Verify and update function configuration
        echo "Updating function configuration..."
        aws lambda update-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION }} \
          --handler AIponATimeCustomerCare.lambda_function.lambda_handler \
          --runtime ${{ env.LAMBDA_RUNTIME }} \
          --region ${{ env.AWS_REGION }} \
          || { echo "Failed to update function configuration"; exit 1; }
        
        # Verify the function was updated
        echo "Verifying deployment..."
        aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION }} --region ${{ env.AWS_REGION }} | jq .Configuration.Handler
        
        echo "Deployment completed successfully!"
